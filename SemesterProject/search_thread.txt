# Search Thread
# Implements linear search algorithm
# Input: N numbers starting from address 1000, key at address 1000+N
# Output: Position of key in array (0-based), or -1 if not found

Begin Data Section
# Thread Data
1000 10   # N (number of elements)
1001 0    # i (loop counter)
1002 0    # found (result)
1003 0    # key (search value)
1004 0    # array[0]
1005 0    # array[1]
1006 0    # array[2]
1007 0    # array[3]
1008 0    # array[4]
1009 0    # array[5]
1010 0    # array[6]
1011 0    # array[7]
1012 0    # array[8]
1013 0    # array[9]
1014 0    # key value

# Constants
1015 1    # Constant 1
1016 -1   # Constant -1

End Data Section

Begin Instruction Section
# Initialize
0 SET 10 1000  # Set N to 10 (number of elements)
1 SET 0 1001   # Set i to 0
2 SET -1 1002  # Set found to -1 (not found)
3 SET 42 1014  # Set key to 42 (search value)
4 SYSCALL YIELD # Yield to OS

# Main Search Loop
5 CPY 1001 1003  # temp = i
6 SUBI 1003 1000 # temp = i - N
7 JIF 1003 20    # If i >= N, go to print result
8 SYSCALL YIELD  # Yield to OS

# Compare current element with key
9 CPY 1001 1003  # temp = i
10 ADD 1003 1004 # temp = i + array[0]
11 CPY 1003 1003 # temp = array[i]
12 SUBI 1003 1014 # temp = array[i] - key
13 JIF 1003 15   # If array[i] == key, set found
14 SYSCALL YIELD # Yield to OS

# Next element
15 ADD 1001 1    # i = i + 1
16 SET 2 5       # Go to main loop

# Set found position
17 CPY 1001 1002 # found = i
18 SET 2 20      # Go to print result

# Print Result
20 CPY 1002 1003 # temp = found
21 SYSCALL PRN 1003 # Print found position
22 SYSCALL YIELD # Yield to OS

# End
23 SYSCALL HLT   # Halt thread

End Instruction Section 